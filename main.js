(()=>{"use strict";const e={inputSelector:".popup__input",submitButtonSelector:".popup__submit-button",inactiveButtonClass:"popup__submit-button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_visible"},t=document.querySelector(".page"),s=t.querySelector("#popup-profile"),i=t.querySelector("#popup-add-card"),n=t.querySelector("#popup-profile-pic"),r=t.querySelector(".profile__edit-button"),o=t.querySelector(".profile__add-button"),a=t.querySelector(".profile__image-container"),l=t.querySelector(".popup__input_type_name"),h=t.querySelector(".popup__input_type_title"),u=class{constructor(e,t){this._form=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass}_showInputError(e,t){const s=this._form.querySelector(".".concat(e.id,"-input-error"));e.classList.add(this._inputErrorClass),s.textContent=t,s.classList.add(this._errorClass)}_resetError(e){e.textContent=""}_hideInputError(e){const t=this._form.querySelector(".".concat(e.id,"-input-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),setTimeout((()=>this._resetError(t)),100)}_isValid(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(e){return!e.every((e=>e.validity.valid))}_disableButton(){this._buttonEl.classList.add(this._inactiveButtonClass),this._buttonEl.disabled=!0}_enableButton(){this._buttonEl.classList.remove(this._inactiveButtonClass),this._buttonEl.disabled=!1}_toggleButtonState(){this._hasInvalidInput(this._inputEls)?this._disableButton():this._enableButton()}_setEventListeners(){this._inputEls=Array.from(this._form.querySelectorAll(this._inputSelector)),this._buttonEl=this._form.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._isValid(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}};class _{constructor(e,t,s,i,n){this._name=e.name,this._link=e.link,this._handleCardClick=s,this._template=t,this._likes=e.likes,this._handleTrashButtonClick=i,this._ownerId=e.owner._id,this._userId=e.userId,this._id=e._id,this._handleLikeButton=n}_getTemplate(){return document.querySelector(this._template).content.querySelector(".card").cloneNode(!0)}updateLikes(e){this._likes=e,this._renderLikes()}_renderLikes(){this._likesTotal.textContent=this._likes.length,this.isLiked()?this._likeButton.classList.add("card__like_clicked"):this._likeButton.classList.remove("card__like_clicked")}isLiked(){return this._likes.some((e=>e._id===this._userId))}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeButton(this)})),this._trashButton.addEventListener("click",(()=>{this._handleTrashButtonClick(this)})),this._imageEl.addEventListener("click",(()=>{this._handleCardClick({link:this._link,name:this._name})}))}getCardId(){return this._id}handleDelete(){this._cardEl.remove(),this._cardEl=null}getView(){return this._cardEl=this._getTemplate(),this._likeButton=this._cardEl.querySelector(".card__like"),this._trashButton=this._cardEl.querySelector(".card__trash"),this._imageEl=this._cardEl.querySelector(".card__image"),this._likesTotal=this._cardEl.querySelector(".card__like-num"),this._cardEl.querySelector(".card__title").textContent=this._name,this._imageEl.style.backgroundImage="url(".concat(this._link,")"),this._renderLikes(),this._ownerId!==this._userId&&this._trashButton.remove(),this._setEventListeners(),this._cardEl}}const c=class{constructor(e){this._popup=document.querySelector(e),this.open=this.open.bind(this),this.close=this.close.bind(this),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("popup_is-visible"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("popup_is-visible"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close(this._popup)}renderSaving(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}setEventListeners(){this._popupCloseButton=this._popup.querySelector(".popup__close"),this._popupCloseButton.addEventListener("click",this.close),this._popup.addEventListener("mousedown",(e=>{e.target.matches(".popup")&&this.close()}))}},d=class extends c{constructor(e,t){super(e),this._form=this._popup.querySelector(".popup__form"),this._handleSubmit=t,this._submitButton=this._form.querySelector(".popup__submit-button"),this._submitButtonText=this._submitButton.textContent,this._inputs=this._form.querySelectorAll(".popup__input")}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}open(){super.open(),this._submitButton.setAttribute.disabled=!0,this._submitButton.classList.add("popup__submit-button_disabled")}close(){super.close(),this._form.reset()}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(this._getInputValues())}))}},p=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_handleResponse(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}initialize(){return Promise.all([this.getUser(),this.getInitialCards()])}getInitialCards(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then((e=>this._handleResponse(e)))}getUser(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then((e=>this._handleResponse(e)))}setUserInfo(e){let{name:t,title:s}=e;return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then((e=>this._handleResponse(e)))}addCard(e){let{name:t,link:s}=e;return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then((e=>this._handleResponse(e)))}deleteCard(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then((e=>this._handleResponse(e)))}toggleLike(e,t){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:t?"DELETE":"PUT",headers:this._headers}).then((e=>this._handleResponse(e)))}updateProfilePic(e){let{avatar:t}=e;return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).then((e=>this._handleResponse(e)))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"233760b2-865b-418c-a988-0a5daaaf7846","Content-Type":"application/json"}}),m=e=>{const t=new _(e,"#card-template",v,b,q);E.addItem(t.getView())};function v(e){g.open(e)}function b(e){B.open(e)}let E,f;p.initialize().then((e=>{const[t,s]=e;E=new class{constructor(e,t){let{items:s,renderer:i}=e;this._items=s,this._renderer=i,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:s,renderer:e=>{f=t._id,m({name:e.name,link:e.link,likes:e.likes,owner:e.owner,_id:e._id,userId:f})}},".elements"),E.renderItems(),S.setUserInfo({name:t.name,title:t.about,avatar:t.avatar})})).catch((e=>{console.log(e)}));const S=new class{constructor(e){let{userNameSelector:t,titleSelector:s,profilePicSelector:i}=e;this._userName=document.querySelector(t),this._title=document.querySelector(s),this._profilePic=document.querySelector(i)}getUserInfo(){return{name:this._userName.textContent,title:this._title.textContent}}setUserInfo(e){let{name:t,title:s,avatar:i}=e;this._userName.textContent=t,this._title.textContent=s,this._profilePic.src=i}}({userNameSelector:".profile__name",titleSelector:".profile__description",profilePicSelector:".profile__image"}),g=new class extends c{constructor(e){super(e),this._imagePopupImage=this._popup.querySelector(".popup__image"),this._imagePopupCaption=this._popup.querySelector(".popup__caption"),this.open=this.open.bind(this)}open(e){let{link:t,name:s}=e;super.open(),this._imagePopupImage.src=t,this._imagePopupImage.alt=s,this._imagePopupCaption.textContent=s}}(".popup_type_image");g.setEventListeners();const k=new u(e,s),y=new u(e,i);new u(e,n).enableValidation(),k.enableValidation(),y.enableValidation();const C=new d(".popup_type_edit",(function(e){C.renderSaving(!0),p.setUserInfo(e).then((e=>{S.setUserInfo({name:e.name,title:e.about,avatar:e.avatar}),C.close()})).catch((e=>{console.log(e)})).finally((()=>{C.renderSaving(!1)}))}));C.setEventListeners(),r.addEventListener("click",(()=>{!function(){const{name:e,title:t}=S.getUserInfo();l.value=e,h.value=t,C.open()}()}));const L=new d(".popup_type_add",(function(e){L.renderSaving(!0),p.addCard(e).then((e=>{m({name:e.name,link:e.link,likes:e.likes,owner:e.owner,_id:e._id,userId:f}),L.close()})).catch((e=>{console.log(e)})).finally((()=>{L.renderSaving(!1)}))}));L.setEventListeners(),o.addEventListener("click",L.open);const B=new class extends c{constructor(e,t){super(e),this._form=this._popup.querySelector(".popup__form"),this._handleSubmit=t,this._submitButton=this._form.querySelector(".popup__submit-button"),this._submitButtonText=this._submitButton.textContent}open(e){super.open(),this._card=e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(this._card)}))}}(".popup_type_delete",(function(e){B.renderSaving(!0),p.deleteCard(e.getCardId()).then((()=>{e.handleDelete(),B.close()})).catch((e=>{console.log(e)})).finally((()=>{B.renderSaving(!1)}))}));B.setEventListeners();const I=new d(".popup_type_edit-profile-pic",(function(e){I.renderSaving(!0),p.updateProfilePic(e).then((e=>{S.setUserInfo({name:e.name,title:e.about,avatar:e.avatar}),I.close()})).catch((e=>{console.log(e)})).finally((()=>{I.renderSaving(!1)}))}));function q(e){p.toggleLike(e._id,e.isLiked()).then((t=>{e.updateLikes(t.likes)})).catch((e=>{console.log(e)}))}I.setEventListeners(),a.addEventListener("click",(()=>{I.open()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
(()=>{"use strict";const e={inputSelector:".popup__input",submitButtonSelector:".popup__submit-button",inactiveButtonClass:"popup__submit-button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_visible"},t=document.querySelector(".page"),s=t.querySelector("#popup-profile"),i=t.querySelector("#popup-add-card"),n=t.querySelector("#popup-profile-pic"),r=t.querySelector(".profile__edit-button"),o=t.querySelector(".profile__add-button"),a=t.querySelector(".profile__image-container"),l=t.querySelector(".popup__input_type_name"),h=t.querySelector(".popup__input_type_title"),u=class{constructor(e,t){this._form=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass}_showInputError(e,t){const s=this._form.querySelector(".".concat(e.id,"-input-error"));e.classList.add(this._inputErrorClass),s.textContent=t,s.classList.add(this._errorClass)}_resetError(e){e.textContent=""}_hideInputError(e){const t=this._form.querySelector(".".concat(e.id,"-input-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),setTimeout((()=>this._resetError(t)),100)}_isValid(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(e){return!e.every((e=>e.validity.valid))}_disableButton(){this._buttonEl.classList.add(this._inactiveButtonClass),this._buttonEl.disabled=!0}_enableButton(){this._buttonEl.classList.remove(this._inactiveButtonClass),this._buttonEl.disabled=!1}_toggleButtonState(){this._hasInvalidInput(this._inputEls)?this._disableButton():this._enableButton()}_setEventListeners(){this._inputEls=Array.from(this._form.querySelectorAll(this._inputSelector)),this._buttonEl=this._form.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._isValid(e),this._toggleButtonState()}))}))}checkInputStatus(){this._inputEls.forEach((e=>{e.value||(this._disableButton(),this._hideInputError(e))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}};class _{constructor(e,t,s,i,n){this._name=e.name,this._link=e.link,this._handleCardClick=s,this._template=t,this._likes=e.likes,this._handleTrashButtonClick=i,this._ownerId=e.owner._id,this._userId=e.userId,this._id=e._id,this._handleLikeButton=n}_getTemplate(){return document.querySelector(this._template).content.querySelector(".card").cloneNode(!0)}updateLikes(e){this._likes=e,this._renderLikes()}_renderLikes(){this._likesTotal.textContent=this._likes.length,this.isLiked()?this._likeButton.classList.add("card__like_clicked"):this._likeButton.classList.remove("card__like_clicked")}isLiked(){return this._likes.some((e=>e._id===this._userId))}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeButton(this)})),this._trashButton.addEventListener("click",(()=>{this._handleTrashButtonClick(this)})),this._imageEl.addEventListener("click",(()=>{this._handleCardClick({link:this._link,name:this._name})}))}getCardId(){return this._id}handleDelete(){this._cardEl.remove(),this._cardEl=null}getView(){return this._cardEl=this._getTemplate(),this._likeButton=this._cardEl.querySelector(".card__like"),this._trashButton=this._cardEl.querySelector(".card__trash"),this._imageEl=this._cardEl.querySelector(".card__image"),this._likesTotal=this._cardEl.querySelector(".card__like-num"),this._cardEl.querySelector(".card__title").textContent=this._name,this._imageEl.style.backgroundImage="url(".concat(this._link,")"),this._renderLikes(),this._ownerId!==this._userId&&this._trashButton.remove(),this._setEventListeners(),this._cardEl}}const c=class{constructor(e){this._popup=document.querySelector(e),this.open=this.open.bind(this),this.close=this.close.bind(this),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("popup_is-visible"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("popup_is-visible"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close(this._popup)}renderSaving(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}setEventListeners(){this._popupCloseButton=this._popup.querySelector(".popup__close"),this._popupCloseButton.addEventListener("click",this.close),this._popup.addEventListener("mousedown",(e=>{e.target.matches(".popup")&&this.close()}))}},d=class extends c{constructor(e,t){super(e),this._form=this._popup.querySelector(".popup__form"),this._handleSubmit=t,this._submitButton=this._form.querySelector(".popup__submit-button"),this._submitButtonText=this._submitButton.textContent,this._inputs=this._form.querySelectorAll(".popup__input")}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}close(){super.close(),this._form.reset()}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(this._getInputValues())}))}},p=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_handleResponse(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))}initialize(){return Promise.all([this.getUser(),this.getInitialCards()])}getInitialCards(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then((e=>this._handleResponse(e)))}getUser(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then((e=>this._handleResponse(e)))}setUserInfo(e){let{name:t,title:s}=e;return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then((e=>this._handleResponse(e)))}addCard(e){let{name:t,link:s}=e;return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then((e=>this._handleResponse(e)))}deleteCard(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then((e=>this._handleResponse(e)))}toggleLike(e,t){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:t?"DELETE":"PUT",headers:this._headers}).then((e=>this._handleResponse(e)))}updateProfilePic(e){let{avatar:t}=e;return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).then((e=>this._handleResponse(e)))}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"233760b2-865b-418c-a988-0a5daaaf7846","Content-Type":"application/json"}}),m=e=>{const t=new _(e,"#card-template",v,E,w);b.addItem(t.getView())};function v(e){k.open(e)}function E(e){B.open(e)}let b,S;p.initialize().then((e=>{const[t,s]=e;b=new class{constructor(e,t){let{items:s,renderer:i}=e;this._items=s,this._renderer=i,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:s,renderer:e=>{S=t._id,m({name:e.name,link:e.link,likes:e.likes,owner:e.owner,_id:e._id,userId:S})}},".elements"),b.renderItems(),f.setUserInfo({name:t.name,title:t.about,avatar:t.avatar})})).catch((e=>{console.log(e)}));const f=new class{constructor(e){let{userNameSelector:t,titleSelector:s,profilePicSelector:i}=e;this._userName=document.querySelector(t),this._title=document.querySelector(s),this._profilePic=document.querySelector(i)}getUserInfo(){return{name:this._userName.textContent,title:this._title.textContent}}setUserInfo(e){let{name:t,title:s,avatar:i}=e;this._userName.textContent=t,this._title.textContent=s,this._profilePic.src=i}}({userNameSelector:".profile__name",titleSelector:".profile__description",profilePicSelector:".profile__image"}),k=new class extends c{constructor(e){super(e),this._imagePopupImage=this._popup.querySelector(".popup__image"),this._imagePopupCaption=this._popup.querySelector(".popup__caption"),this.open=this.open.bind(this)}open(e){let{link:t,name:s}=e;super.open(),this._imagePopupImage.src=t,this._imagePopupImage.alt=s,this._imagePopupCaption.textContent=s}}(".popup_type_image");k.setEventListeners();const g=new u(e,s),y=new u(e,i),C=new u(e,n);C.enableValidation(),g.enableValidation(),y.enableValidation();const L=new d(".popup_type_edit",(function(e){L.renderSaving(!0),p.setUserInfo(e).then((e=>{f.setUserInfo({name:e.name,title:e.about,avatar:e.avatar}),L.close()})).catch((e=>{console.log(e)})).finally((()=>{L.renderSaving(!1)}))}));L.setEventListeners(),r.addEventListener("click",(()=>{!function(){const{name:e,title:t}=f.getUserInfo();g.checkInputStatus(),l.value=e,h.value=t,L.open()}()}));const I=new d(".popup_type_add",(function(e){I.renderSaving(!0),p.addCard(e).then((e=>{m({name:e.name,link:e.link,likes:e.likes,owner:e.owner,_id:e._id,userId:S}),I.close()})).catch((e=>{console.log(e)})).finally((()=>{I.renderSaving(!1)}))}));I.setEventListeners(),o.addEventListener("click",(()=>{I.open(),y.checkInputStatus()}));const B=new class extends c{constructor(e,t){super(e),this._form=this._popup.querySelector(".popup__form"),this._handleSubmit=t,this._submitButton=this._form.querySelector(".popup__submit-button"),this._submitButtonText=this._submitButton.textContent}open(e){super.open(),this._card=e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(this._card)}))}}(".popup_type_delete",(function(e){B.renderSaving(!0),p.deleteCard(e.getCardId()).then((()=>{e.handleDelete(),B.close()})).catch((e=>{console.log(e)})).finally((()=>{B.renderSaving(!1)}))}));B.setEventListeners();const q=new d(".popup_type_edit-profile-pic",(function(e){q.renderSaving(!0),p.updateProfilePic(e).then((e=>{f.setUserInfo({name:e.name,title:e.about,avatar:e.avatar}),q.close()})).catch((e=>{console.log(e)})).finally((()=>{q.renderSaving(!1)}))}));function w(e){p.toggleLike(e._id,e.isLiked()).then((t=>{e.updateLikes(t.likes)})).catch((e=>{console.log(e)}))}q.setEventListeners(),a.addEventListener("click",(()=>{q.open(),C.checkInputStatus()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RixFQUFaLElBRURvQixTQUFRLEtBQ1BsQyxFQUFZdkQsY0FBYSxFQUF6QixHQUVMLElBOUVEdUQsRUFBWWxELG9CQUVaLE1BQU15RixFQUFrQixJQUFJTixFQUMxQixnQ0E2RUYsU0FBZ0N2SSxHQUM5QjZJLEVBQWdCOUYsY0FBYSxHQUM3QmlCLEVBQUFBLGlCQUNvQmhFLEdBQ2pCaUYsTUFBTWpGLElBQ0xrSCxFQUFTaEMsWUFBWSxDQUNuQjVFLEtBQU1OLEVBQUtNLEtBQ1g2RSxNQUFPbkYsRUFBS3dGLE1BQ1pNLE9BQVE5RixFQUFLOEYsU0FFZitDLEVBQWdCbEcsT0FBaEIsSUFFRHdFLE9BQU9DLElBQ05DLFFBQVFDLElBQUlGLEVBQVosSUFFRG9CLFNBQVEsS0FDUEssRUFBZ0I5RixjQUFhLEVBQTdCLEdBRUwsSUFFRCxTQUFTNkMsRUFBV0ssR0FDbEJqQyxFQUFBQSxXQUNjaUMsRUFBS2pGLElBQUtpRixFQUFLdEUsV0FDMUJzRCxNQUFNckUsSUFDTHFGLEVBQUsxRSxZQUFZWCxFQUFNQSxNQUF2QixJQUVEdUcsT0FBT0MsSUFDTkMsUUFBUUMsSUFBSUYsRUFBWixHQUVMLENBdkdEeUIsRUFBZ0J6RixvQkFDaEJyRyxFQUFxQjBDLGlCQUFpQixTQUFTLEtBQzdDb0osRUFBZ0JwRyxPQUNoQjRGLEVBQXdCM0ksa0JBQXhCLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL0FwaS5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL3BhZ2VzL2luZGV4LmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aERlbGV0ZUNvbmZpcm0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgc2V0dGluZ3MgPSB7XHJcbiAgaW5wdXRTZWxlY3RvcjogXCIucG9wdXBfX2lucHV0XCIsXHJcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6IFwiLnBvcHVwX19zdWJtaXQtYnV0dG9uXCIsXHJcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJwb3B1cF9fc3VibWl0LWJ1dHRvbl9kaXNhYmxlZFwiLFxyXG4gIGlucHV0RXJyb3JDbGFzczogXCJwb3B1cF9faW5wdXRfdHlwZV9lcnJvclwiLFxyXG4gIGVycm9yQ2xhc3M6IFwicG9wdXBfX2lucHV0LWVycm9yX3Zpc2libGVcIixcclxufTtcclxuXHJcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbi8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdyYXBwZXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXHJcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbmNvbnN0IHBhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBhZ2VcIik7XHJcbmNvbnN0IHBvcHVwUHJvZmlsZUZvcm0gPSBwYWdlLnF1ZXJ5U2VsZWN0b3IoXCIjcG9wdXAtcHJvZmlsZVwiKTtcclxuY29uc3QgcG9wdXBBZGRGb3JtID0gcGFnZS5xdWVyeVNlbGVjdG9yKFwiI3BvcHVwLWFkZC1jYXJkXCIpO1xyXG5jb25zdCBwb3B1cFByb2ZpbGVQaWNGb3JtID0gcGFnZS5xdWVyeVNlbGVjdG9yKFwiI3BvcHVwLXByb2ZpbGUtcGljXCIpO1xyXG5jb25zdCBjYXJkRWxlbWVudHNTZWxlY3RvciA9IFwiLmVsZW1lbnRzXCI7XHJcbmNvbnN0IHByb2ZpbGVQaWNTZWxlY3RvciA9IFwiLnByb2ZpbGVfX2ltYWdlXCI7XHJcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbi8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCdXR0b25zICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXHJcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbmNvbnN0IGVkaXRCdXR0b24gPSBwYWdlLnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fZWRpdC1idXR0b25cIik7XHJcbmNvbnN0IGFkZEJ1dHRvbiA9IHBhZ2UucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19hZGQtYnV0dG9uXCIpO1xyXG5jb25zdCBlZGl0UHJvZmlsZVBpY0J1dHRvbiA9IHBhZ2UucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19pbWFnZS1jb250YWluZXJcIik7XHJcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbi8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnB1dHMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXHJcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbmNvbnN0IHByb2ZpbGVOYW1lU2VsZWN0b3IgPSBcIi5wcm9maWxlX19uYW1lXCI7XHJcbmNvbnN0IHByb2ZpbGVUaXRsZVNlbGVjdG9yID0gXCIucHJvZmlsZV9fZGVzY3JpcHRpb25cIjtcclxuY29uc3QgcG9wdXBOYW1lID0gcGFnZS5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19pbnB1dF90eXBlX25hbWVcIik7XHJcbmNvbnN0IHBvcHVwVGl0bGUgPSBwYWdlLnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX2lucHV0X3R5cGVfdGl0bGVcIik7XHJcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcbi8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRlbXBsYXRlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXHJcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblxyXG5jb25zdCBjYXJkVGVtcGxhdGVTZWxlY3RvciA9IFwiI2NhcmQtdGVtcGxhdGVcIjtcclxuXHJcbmV4cG9ydCB7XHJcbiAgc2V0dGluZ3MsXHJcbiAgcG9wdXBQcm9maWxlRm9ybSxcclxuICBwb3B1cEFkZEZvcm0sXHJcbiAgcG9wdXBQcm9maWxlUGljRm9ybSxcclxuICBjYXJkRWxlbWVudHNTZWxlY3RvcixcclxuICBlZGl0QnV0dG9uLFxyXG4gIGFkZEJ1dHRvbixcclxuICBlZGl0UHJvZmlsZVBpY0J1dHRvbixcclxuICBwcm9maWxlTmFtZVNlbGVjdG9yLFxyXG4gIHByb2ZpbGVUaXRsZVNlbGVjdG9yLFxyXG4gIHBvcHVwTmFtZSxcclxuICBwcm9maWxlUGljU2VsZWN0b3IsXHJcbiAgcG9wdXBUaXRsZSxcclxuICBjYXJkVGVtcGxhdGVTZWxlY3RvcixcclxufTtcclxuIiwiY2xhc3MgRm9ybVZhbGlkYXRvciB7XHJcbiAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIGZvcm1FbGVtZW50KSB7XHJcbiAgICB0aGlzLl9mb3JtID0gZm9ybUVsZW1lbnQ7XHJcbiAgICB0aGlzLl9pbnB1dFNlbGVjdG9yID0gc2V0dGluZ3MuaW5wdXRTZWxlY3RvcjtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yID0gc2V0dGluZ3Muc3VibWl0QnV0dG9uU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gc2V0dGluZ3MuaW5hY3RpdmVCdXR0b25DbGFzcztcclxuICAgIHRoaXMuX2lucHV0RXJyb3JDbGFzcyA9IHNldHRpbmdzLmlucHV0RXJyb3JDbGFzcztcclxuICAgIHRoaXMuX2Vycm9yQ2xhc3MgPSBzZXR0aW5ncy5lcnJvckNsYXNzO1xyXG4gIH1cclxuXHJcbiAgX3Nob3dJbnB1dEVycm9yKGlucHV0RWwsIGVycm9yTWVzc2FnZSkge1xyXG4gICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKGAuJHtpbnB1dEVsLmlkfS1pbnB1dC1lcnJvcmApO1xyXG4gICAgaW5wdXRFbC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBlcnJvck1lc3NhZ2U7XHJcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9lcnJvckNsYXNzKTtcclxuICB9XHJcblxyXG4gIF9yZXNldEVycm9yKGVycm9yRWxlbWVudCkge1xyXG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcclxuICB9XHJcblxyXG4gIF9oaWRlSW5wdXRFcnJvcihpbnB1dEVsKSB7XHJcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IoYC4ke2lucHV0RWwuaWR9LWlucHV0LWVycm9yYCk7XHJcbiAgICBpbnB1dEVsLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5wdXRFcnJvckNsYXNzKTtcclxuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2Vycm9yQ2xhc3MpO1xyXG4gICAgLy8gdGltZSBkZWxheSB0byBhbGxvdyBjc3MgdHJhbnNpdGlvbiB0byBzaG93IGVmZmVjdFxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLl9yZXNldEVycm9yKGVycm9yRWxlbWVudCksIDEwMCk7XHJcbiAgfVxyXG5cclxuICBfaXNWYWxpZChpbnB1dEVsKSB7XHJcbiAgICBpZiAoIWlucHV0RWwudmFsaWRpdHkudmFsaWQpIHtcclxuICAgICAgdGhpcy5fc2hvd0lucHV0RXJyb3IoaW5wdXRFbCwgaW5wdXRFbC52YWxpZGF0aW9uTWVzc2FnZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9oYXNJbnZhbGlkSW5wdXQoaW5wdXRMaXN0KSB7XHJcbiAgICByZXR1cm4gIWlucHV0TGlzdC5ldmVyeSgoaW5wdXRFbCkgPT4gaW5wdXRFbC52YWxpZGl0eS52YWxpZCk7XHJcbiAgfVxyXG5cclxuICBfZGlzYWJsZUJ1dHRvbigpIHtcclxuICAgIHRoaXMuX2J1dHRvbkVsLmNsYXNzTGlzdC5hZGQodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICB0aGlzLl9idXR0b25FbC5kaXNhYmxlZCA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBfZW5hYmxlQnV0dG9uKCkge1xyXG4gICAgdGhpcy5fYnV0dG9uRWwuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgIHRoaXMuX2J1dHRvbkVsLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgfVxyXG5cclxuICBfdG9nZ2xlQnV0dG9uU3RhdGUoKSB7XHJcbiAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KHRoaXMuX2lucHV0RWxzKSkge1xyXG4gICAgICB0aGlzLl9kaXNhYmxlQnV0dG9uKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9lbmFibGVCdXR0b24oKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHRoaXMuX2lucHV0RWxzID0gQXJyYXkuZnJvbShcclxuICAgICAgdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2lucHV0U2VsZWN0b3IpXHJcbiAgICApO1xyXG4gICAgdGhpcy5fYnV0dG9uRWwgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IodGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5faW5wdXRFbHMuZm9yRWFjaCgoaW5wdXRFbCkgPT4ge1xyXG4gICAgICBpbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5faXNWYWxpZChpbnB1dEVsKTtcclxuXHJcbiAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNoZWNrSW5wdXRTdGF0dXMoKSB7XHJcbiAgICB0aGlzLl9pbnB1dEVscy5mb3JFYWNoKChpbnB1dEVsKSA9PiB7XHJcbiAgICAgIGlmICghaW5wdXRFbC52YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX2Rpc2FibGVCdXR0b24oKTtcclxuICAgICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBlbmFibGVWYWxpZGF0aW9uKCkge1xyXG4gICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChldnQpID0+IHtcclxuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRm9ybVZhbGlkYXRvcjtcclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZCB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBkYXRhLFxyXG4gICAgdGVtcGxhdGVTZWxlY3RvcixcclxuICAgIGhhbmRsZUNhcmRDbGljayxcclxuICAgIGhhbmRsZVRyYXNoQnV0dG9uQ2xpY2ssXHJcbiAgICBoYW5kbGVMaWtlQnV0dG9uXHJcbiAgKSB7XHJcbiAgICB0aGlzLl9uYW1lID0gZGF0YS5uYW1lO1xyXG4gICAgdGhpcy5fbGluayA9IGRhdGEubGluaztcclxuICAgIHRoaXMuX2hhbmRsZUNhcmRDbGljayA9IGhhbmRsZUNhcmRDbGljaztcclxuICAgIHRoaXMuX3RlbXBsYXRlID0gdGVtcGxhdGVTZWxlY3RvcjtcclxuICAgIHRoaXMuX2xpa2VzID0gZGF0YS5saWtlcztcclxuICAgIHRoaXMuX2hhbmRsZVRyYXNoQnV0dG9uQ2xpY2sgPSBoYW5kbGVUcmFzaEJ1dHRvbkNsaWNrO1xyXG4gICAgdGhpcy5fb3duZXJJZCA9IGRhdGEub3duZXIuX2lkO1xyXG4gICAgdGhpcy5fdXNlcklkID0gZGF0YS51c2VySWQ7XHJcbiAgICB0aGlzLl9pZCA9IGRhdGEuX2lkO1xyXG4gICAgdGhpcy5faGFuZGxlTGlrZUJ1dHRvbiA9IGhhbmRsZUxpa2VCdXR0b247XHJcbiAgfVxyXG5cclxuICBfZ2V0VGVtcGxhdGUoKSB7XHJcbiAgICByZXR1cm4gZG9jdW1lbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IodGhpcy5fdGVtcGxhdGUpXHJcbiAgICAgIC5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZFwiKVxyXG4gICAgICAuY2xvbmVOb2RlKHRydWUpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlTGlrZXMobGlrZXMpIHtcclxuICAgIHRoaXMuX2xpa2VzID0gbGlrZXM7XHJcbiAgICB0aGlzLl9yZW5kZXJMaWtlcygpO1xyXG4gIH1cclxuXHJcbiAgX3JlbmRlckxpa2VzKCkge1xyXG4gICAgdGhpcy5fbGlrZXNUb3RhbC50ZXh0Q29udGVudCA9IHRoaXMuX2xpa2VzLmxlbmd0aDtcclxuICAgIGlmICh0aGlzLmlzTGlrZWQoKSkge1xyXG4gICAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJjYXJkX19saWtlX2NsaWNrZWRcIik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJjYXJkX19saWtlX2NsaWNrZWRcIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpc0xpa2VkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2xpa2VzLnNvbWUoKGxpa2UpID0+IGxpa2UuX2lkID09PSB0aGlzLl91c2VySWQpO1xyXG4gIH1cclxuXHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fbGlrZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICB0aGlzLl9oYW5kbGVMaWtlQnV0dG9uKHRoaXMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5fdHJhc2hCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlVHJhc2hCdXR0b25DbGljayh0aGlzKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuX2ltYWdlRWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrKHsgbGluazogdGhpcy5fbGluaywgbmFtZTogdGhpcy5fbmFtZSB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q2FyZElkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gIH1cclxuXHJcbiAgaGFuZGxlRGVsZXRlKCkge1xyXG4gICAgdGhpcy5fY2FyZEVsLnJlbW92ZSgpO1xyXG4gICAgdGhpcy5fY2FyZEVsID0gbnVsbDtcclxuICB9XHJcblxyXG4gIGdldFZpZXcoKSB7XHJcbiAgICB0aGlzLl9jYXJkRWwgPSB0aGlzLl9nZXRUZW1wbGF0ZSgpO1xyXG5cclxuICAgIHRoaXMuX2xpa2VCdXR0b24gPSB0aGlzLl9jYXJkRWwucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlXCIpO1xyXG4gICAgdGhpcy5fdHJhc2hCdXR0b24gPSB0aGlzLl9jYXJkRWwucXVlcnlTZWxlY3RvcihcIi5jYXJkX190cmFzaFwiKTtcclxuICAgIHRoaXMuX2ltYWdlRWwgPSB0aGlzLl9jYXJkRWwucXVlcnlTZWxlY3RvcihcIi5jYXJkX19pbWFnZVwiKTtcclxuICAgIHRoaXMuX2xpa2VzVG90YWwgPSB0aGlzLl9jYXJkRWwucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlLW51bVwiKTtcclxuXHJcbiAgICB0aGlzLl9jYXJkRWwucXVlcnlTZWxlY3RvcihcIi5jYXJkX190aXRsZVwiKS50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XHJcbiAgICB0aGlzLl9pbWFnZUVsLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IGB1cmwoJHt0aGlzLl9saW5rfSlgO1xyXG4gICAgdGhpcy5fcmVuZGVyTGlrZXMoKTtcclxuICAgIGlmICh0aGlzLl9vd25lcklkICE9PSB0aGlzLl91c2VySWQpIHtcclxuICAgICAgdGhpcy5fdHJhc2hCdXR0b24ucmVtb3ZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5fY2FyZEVsO1xyXG4gIH1cclxufVxyXG4iLCJjbGFzcyBTZWN0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcih7IGl0ZW1zLCByZW5kZXJlciB9LCBjb250YWluZXJTZWxlY3Rvcikge1xyXG4gICAgdGhpcy5faXRlbXMgPSBpdGVtcztcclxuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICB0aGlzLl9jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lclNlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIHJlbmRlckl0ZW1zKCkge1xyXG4gICAgdGhpcy5faXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICB0aGlzLl9yZW5kZXJlcihpdGVtKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYWRkSXRlbShlbGVtZW50KSB7XHJcbiAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChlbGVtZW50KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlY3Rpb247XHJcbiIsImNsYXNzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLl9wb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB0aGlzLm9wZW4gPSB0aGlzLm9wZW4uYmluZCh0aGlzKTtcclxuICAgIHRoaXMuY2xvc2UgPSB0aGlzLmNsb3NlLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLl9oYW5kbGVFc2NDbG9zZSA9IHRoaXMuX2hhbmRsZUVzY0Nsb3NlLmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBvcGVuKCkge1xyXG4gICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LmFkZChcInBvcHVwX2lzLXZpc2libGVcIik7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XHJcbiAgfVxyXG5cclxuICBjbG9zZSgpIHtcclxuICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5yZW1vdmUoXCJwb3B1cF9pcy12aXNpYmxlXCIpO1xyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZUVzY0Nsb3NlKGV2dCkge1xyXG4gICAgaWYgKGV2dC5rZXkgPT09IFwiRXNjYXBlXCIpIHtcclxuICAgICAgdGhpcy5jbG9zZSh0aGlzLl9wb3B1cCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXJTYXZpbmcoaXNTYXZpbmcsIGxvYWRpbmdUZXh0ID0gXCJTYXZpbmcuLi5cIikge1xyXG4gICAgaWYgKGlzU2F2aW5nKSB7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudCA9IGxvYWRpbmdUZXh0O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50ID0gdGhpcy5fc3VibWl0QnV0dG9uVGV4dDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fcG9wdXBDbG9zZUJ1dHRvbiA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX2Nsb3NlXCIpO1xyXG4gICAgdGhpcy5fcG9wdXBDbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5jbG9zZSk7XHJcbiAgICB0aGlzLl9wb3B1cC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIChldnQpID0+IHtcclxuICAgICAgaWYgKGV2dC50YXJnZXQubWF0Y2hlcyhcIi5wb3B1cFwiKSkge1xyXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQb3B1cDtcclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5jbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIGhhbmRsZVN1Ym1pdCkge1xyXG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9mb3JtID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9fZm9ybVwiKTtcclxuICAgIHRoaXMuX2hhbmRsZVN1Ym1pdCA9IGhhbmRsZVN1Ym1pdDtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9fc3VibWl0LWJ1dHRvblwiKTtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvblRleHQgPSB0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQ7XHJcbiAgICB0aGlzLl9pbnB1dHMgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoXCIucG9wdXBfX2lucHV0XCIpO1xyXG4gIH1cclxuXHJcbiAgX2dldElucHV0VmFsdWVzKCkge1xyXG4gICAgY29uc3QgaW5wdXRWYWx1ZXMgPSB7fTtcclxuICAgIHRoaXMuX2lucHV0cy5mb3JFYWNoKChpbnB1dEVsKSA9PiB7XHJcbiAgICAgIGlucHV0VmFsdWVzW2lucHV0RWwubmFtZV0gPSBpbnB1dEVsLnZhbHVlO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gaW5wdXRWYWx1ZXM7XHJcbiAgfVxyXG5cclxuICBjbG9zZSgpIHtcclxuICAgIHN1cGVyLmNsb3NlKCk7XHJcbiAgICB0aGlzLl9mb3JtLnJlc2V0KCk7XHJcbiAgfVxyXG5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLl9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xyXG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy5faGFuZGxlU3VibWl0KHRoaXMuX2dldElucHV0VmFsdWVzKCkpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQb3B1cFdpdGhGb3JtO1xyXG4iLCJjbGFzcyBBcGkge1xyXG4gIGNvbnN0cnVjdG9yKHsgYmFzZVVybCwgaGVhZGVycyB9KSB7XHJcbiAgICB0aGlzLl9iYXNlVXJsID0gYmFzZVVybDtcclxuICAgIHRoaXMuX2hlYWRlcnMgPSBoZWFkZXJzO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZVJlc3BvbnNlKHJlcykge1xyXG4gICAgcmV0dXJuIHJlcy5vayA/IHJlcy5qc29uKCkgOiBQcm9taXNlLnJlamVjdChgRXJyb3I6ICR7cmVzLnN0YXR1c31gKTtcclxuICB9XHJcblxyXG4gIGluaXRpYWxpemUoKSB7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoW3RoaXMuZ2V0VXNlcigpLCB0aGlzLmdldEluaXRpYWxDYXJkcygpXSk7XHJcbiAgfVxyXG5cclxuICBnZXRJbml0aWFsQ2FyZHMoKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHRoaXMuX2hhbmRsZVJlc3BvbnNlKHJlcykpO1xyXG4gIH1cclxuXHJcbiAgZ2V0VXNlcigpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAsIHtcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgIH0pLnRoZW4oKHJlcykgPT4gdGhpcy5faGFuZGxlUmVzcG9uc2UocmVzKSk7XHJcbiAgfVxyXG5cclxuICBzZXRVc2VySW5mbyh7IG5hbWUsIHRpdGxlIH0pIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAsIHtcclxuICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgIGFib3V0OiB0aXRsZSxcclxuICAgICAgfSksXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHRoaXMuX2hhbmRsZVJlc3BvbnNlKHJlcykpO1xyXG4gIH1cclxuXHJcbiAgYWRkQ2FyZCh7IG5hbWUsIGxpbmsgfSkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xyXG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICBsaW5rOiBsaW5rLFxyXG4gICAgICB9KSxcclxuICAgIH0pLnRoZW4oKHJlcykgPT4gdGhpcy5faGFuZGxlUmVzcG9uc2UocmVzKSk7XHJcbiAgfVxyXG5cclxuICBkZWxldGVDYXJkKGNhcmRJZCkge1xyXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7Y2FyZElkfWAsIHtcclxuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxyXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxyXG4gICAgfSkudGhlbigocmVzKSA9PiB0aGlzLl9oYW5kbGVSZXNwb25zZShyZXMpKTtcclxuICB9XHJcblxyXG4gIHRvZ2dsZUxpa2UoaWQsIGlzTGlrZWQpIHtcclxuICAgIHJldHVybiBmZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy9saWtlcy8ke2lkfWAsIHtcclxuICAgICAgbWV0aG9kOiBpc0xpa2VkID8gXCJERUxFVEVcIiA6IFwiUFVUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHRoaXMuX2hhbmRsZVJlc3BvbnNlKHJlcykpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlUHJvZmlsZVBpYyh7IGF2YXRhciB9KSB7XHJcbiAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWUvYXZhdGFyYCwge1xyXG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcclxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIGF2YXRhcixcclxuICAgICAgfSksXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHRoaXMuX2hhbmRsZVJlc3BvbnNlKHJlcykpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGFwaSA9IG5ldyBBcGkoe1xyXG4gIGJhc2VVcmw6IFwiaHR0cHM6Ly9hcm91bmQubm9tb3JlcGFydGllcy5jby92MS9ncm91cC0xMlwiLFxyXG4gIGhlYWRlcnM6IHtcclxuICAgIGF1dGhvcml6YXRpb246IFwiMjMzNzYwYjItODY1Yi00MThjLWE5ODgtMGE1ZGFhYWY3ODQ2XCIsXHJcbiAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICB9LFxyXG59KTtcclxuIiwiaW1wb3J0IHtcclxuICBzZXR0aW5ncyxcclxuICBwb3B1cFByb2ZpbGVGb3JtLFxyXG4gIHBvcHVwQWRkRm9ybSxcclxuICBwb3B1cFByb2ZpbGVQaWNGb3JtLFxyXG4gIGNhcmRFbGVtZW50c1NlbGVjdG9yLFxyXG4gIGVkaXRCdXR0b24sXHJcbiAgYWRkQnV0dG9uLFxyXG4gIGVkaXRQcm9maWxlUGljQnV0dG9uLFxyXG4gIHByb2ZpbGVOYW1lU2VsZWN0b3IsXHJcbiAgcHJvZmlsZVRpdGxlU2VsZWN0b3IsXHJcbiAgcG9wdXBOYW1lLFxyXG4gIHBvcHVwVGl0bGUsXHJcbiAgY2FyZFRlbXBsYXRlU2VsZWN0b3IsXHJcbiAgcHJvZmlsZVBpY1NlbGVjdG9yLFxyXG59IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcclxuaW1wb3J0IFwiLi9pbmRleC5jc3NcIjtcclxuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xyXG5pbXBvcnQgQ2FyZCBmcm9tIFwiLi4vY29tcG9uZW50cy9DYXJkLmpzXCI7XHJcbmltcG9ydCBTZWN0aW9uIGZyb20gXCIuLi9jb21wb25lbnRzL1NlY3Rpb24uanNcIjtcclxuaW1wb3J0IFBvcHVwV2l0aEZvcm0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoSW1hZ2UgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanNcIjtcclxuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XHJcbmltcG9ydCB7IGFwaSB9IGZyb20gXCIuLi9jb21wb25lbnRzL0FwaVwiO1xyXG5pbXBvcnQgUG9wdXBXaXRoRGVsZXRlQ29uZmlybSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhEZWxldGVDb25maXJtLmpzXCI7XHJcblxyXG5jb25zdCByZW5kZXJDYXJkID0gKGNhcmQpID0+IHtcclxuICBjb25zdCBuZXdDYXJkID0gbmV3IENhcmQoXHJcbiAgICBjYXJkLFxyXG4gICAgY2FyZFRlbXBsYXRlU2VsZWN0b3IsXHJcbiAgICBoYW5kbGVDYXJkQ2xpY2ssXHJcbiAgICBoYW5kbGVUcmFzaEJ1dHRvbkNsaWNrLFxyXG4gICAgdG9nZ2xlTGlrZVxyXG4gICk7XHJcbiAgY2FyZExpc3QuYWRkSXRlbShuZXdDYXJkLmdldFZpZXcoKSk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVDYXJkQ2xpY2soY2FyZCkge1xyXG4gIGltYWdlUG9wdXAub3BlbihjYXJkKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlVHJhc2hCdXR0b25DbGljayhjYXJkKSB7XHJcbiAgZGVsZXRlUG9wdXAub3BlbihjYXJkKTtcclxufVxyXG5cclxubGV0IGNhcmRMaXN0O1xyXG5sZXQgdXNlcklkO1xyXG5hcGlcclxuICAuaW5pdGlhbGl6ZSgpXHJcbiAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgY29uc3QgW3VzZXIsIGRhdGFdID0gcmVzO1xyXG5cclxuICAgIGNhcmRMaXN0ID0gbmV3IFNlY3Rpb24oXHJcbiAgICAgIHtcclxuICAgICAgICBpdGVtczogZGF0YSxcclxuICAgICAgICByZW5kZXJlcjogKGl0ZW0pID0+IHtcclxuICAgICAgICAgIHVzZXJJZCA9IHVzZXIuX2lkO1xyXG4gICAgICAgICAgcmVuZGVyQ2FyZCh7XHJcbiAgICAgICAgICAgIG5hbWU6IGl0ZW0ubmFtZSxcclxuICAgICAgICAgICAgbGluazogaXRlbS5saW5rLFxyXG4gICAgICAgICAgICBsaWtlczogaXRlbS5saWtlcyxcclxuICAgICAgICAgICAgb3duZXI6IGl0ZW0ub3duZXIsXHJcbiAgICAgICAgICAgIF9pZDogaXRlbS5faWQsXHJcbiAgICAgICAgICAgIHVzZXJJZCxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICAgIGNhcmRFbGVtZW50c1NlbGVjdG9yXHJcbiAgICApO1xyXG4gICAgY2FyZExpc3QucmVuZGVySXRlbXMoKTtcclxuICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKHtcclxuICAgICAgbmFtZTogdXNlci5uYW1lLFxyXG4gICAgICB0aXRsZTogdXNlci5hYm91dCxcclxuICAgICAgYXZhdGFyOiB1c2VyLmF2YXRhcixcclxuICAgIH0pO1xyXG4gIH0pXHJcbiAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgfSk7XHJcblxyXG5jb25zdCB1c2VySW5mbyA9IG5ldyBVc2VySW5mbyh7XHJcbiAgdXNlck5hbWVTZWxlY3RvcjogcHJvZmlsZU5hbWVTZWxlY3RvcixcclxuICB0aXRsZVNlbGVjdG9yOiBwcm9maWxlVGl0bGVTZWxlY3RvcixcclxuICBwcm9maWxlUGljU2VsZWN0b3I6IHByb2ZpbGVQaWNTZWxlY3RvcixcclxufSk7XHJcblxyXG5jb25zdCBpbWFnZVBvcHVwID0gbmV3IFBvcHVwV2l0aEltYWdlKFwiLnBvcHVwX3R5cGVfaW1hZ2VcIik7XHJcbmltYWdlUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbi8vIGludGlhbGl6ZSBmb3JtIHZhbGlkYXRpb25cclxuY29uc3QgZWRpdEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihzZXR0aW5ncywgcG9wdXBQcm9maWxlRm9ybSk7XHJcbmNvbnN0IGFkZEZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihzZXR0aW5ncywgcG9wdXBBZGRGb3JtKTtcclxuY29uc3QgcHJvZmlsZVBpY0Zvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihcclxuICBzZXR0aW5ncyxcclxuICBwb3B1cFByb2ZpbGVQaWNGb3JtXHJcbik7XHJcbnByb2ZpbGVQaWNGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuZWRpdEZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xyXG5hZGRGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuXHJcbmNvbnN0IGVkaXRQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKFwiLnBvcHVwX3R5cGVfZWRpdFwiLCBoYW5kbGVQcm9maWxlU3VibWl0KTtcclxuZWRpdFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbmVkaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBoYW5kbGVQcm9maWxlT3BlbigpO1xyXG59KTtcclxuXHJcbmNvbnN0IGFkZFBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXCIucG9wdXBfdHlwZV9hZGRcIiwgaGFuZGxlTmV3Q2FyZFN1Ym1pdCk7XHJcbmFkZFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbmFkZEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gIGFkZFBvcHVwLm9wZW4oKTtcclxuICBhZGRGb3JtVmFsaWRhdG9yLmNoZWNrSW5wdXRTdGF0dXMoKTtcclxufSk7XHJcblxyXG5jb25zdCBkZWxldGVQb3B1cCA9IG5ldyBQb3B1cFdpdGhEZWxldGVDb25maXJtKFxyXG4gIFwiLnBvcHVwX3R5cGVfZGVsZXRlXCIsXHJcbiAgaGFuZGxlQ29uZmlybURlbGV0ZVxyXG4pO1xyXG5kZWxldGVQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuY29uc3QgcHJvZmlsZVBpY1BvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXHJcbiAgXCIucG9wdXBfdHlwZV9lZGl0LXByb2ZpbGUtcGljXCIsXHJcbiAgaGFuZGxlUHJvZmlsZVBpY1N1Ym1pdFxyXG4pO1xyXG5wcm9maWxlUGljUG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuZWRpdFByb2ZpbGVQaWNCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICBwcm9maWxlUGljUG9wdXAub3BlbigpO1xyXG4gIHByb2ZpbGVQaWNGb3JtVmFsaWRhdG9yLmNoZWNrSW5wdXRTdGF0dXMoKTtcclxufSk7XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVQcm9maWxlU3VibWl0KGRhdGEpIHtcclxuICBlZGl0UG9wdXAucmVuZGVyU2F2aW5nKHRydWUpO1xyXG4gIGFwaVxyXG4gICAgLnNldFVzZXJJbmZvKGRhdGEpXHJcbiAgICAudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICB1c2VySW5mby5zZXRVc2VySW5mbyh7XHJcbiAgICAgICAgbmFtZTogZGF0YS5uYW1lLFxyXG4gICAgICAgIHRpdGxlOiBkYXRhLmFib3V0LFxyXG4gICAgICAgIGF2YXRhcjogZGF0YS5hdmF0YXIsXHJcbiAgICAgIH0pO1xyXG4gICAgICBlZGl0UG9wdXAuY2xvc2UoKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgfSlcclxuICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgZWRpdFBvcHVwLnJlbmRlclNhdmluZyhmYWxzZSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlUHJvZmlsZU9wZW4oKSB7XHJcbiAgY29uc3QgeyBuYW1lLCB0aXRsZSB9ID0gdXNlckluZm8uZ2V0VXNlckluZm8oKTtcclxuICBlZGl0Rm9ybVZhbGlkYXRvci5jaGVja0lucHV0U3RhdHVzKCk7XHJcbiAgcG9wdXBOYW1lLnZhbHVlID0gbmFtZTtcclxuICBwb3B1cFRpdGxlLnZhbHVlID0gdGl0bGU7XHJcblxyXG4gIGVkaXRQb3B1cC5vcGVuKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZU5ld0NhcmRTdWJtaXQoZGF0YSkge1xyXG4gIGFkZFBvcHVwLnJlbmRlclNhdmluZyh0cnVlKTtcclxuICBhcGlcclxuICAgIC5hZGRDYXJkKGRhdGEpXHJcbiAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgIHJlbmRlckNhcmQoe1xyXG4gICAgICAgIG5hbWU6IHJlcy5uYW1lLFxyXG4gICAgICAgIGxpbms6IHJlcy5saW5rLFxyXG4gICAgICAgIGxpa2VzOiByZXMubGlrZXMsXHJcbiAgICAgICAgb3duZXI6IHJlcy5vd25lcixcclxuICAgICAgICBfaWQ6IHJlcy5faWQsXHJcbiAgICAgICAgdXNlcklkLFxyXG4gICAgICB9KTtcclxuICAgICAgYWRkUG9wdXAuY2xvc2UoKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgfSlcclxuICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgYWRkUG9wdXAucmVuZGVyU2F2aW5nKGZhbHNlKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVDb25maXJtRGVsZXRlKGNhcmQpIHtcclxuICBkZWxldGVQb3B1cC5yZW5kZXJTYXZpbmcodHJ1ZSk7XHJcbiAgYXBpXHJcbiAgICAuZGVsZXRlQ2FyZChjYXJkLmdldENhcmRJZCgpKVxyXG4gICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICBjYXJkLmhhbmRsZURlbGV0ZSgpO1xyXG4gICAgICBkZWxldGVQb3B1cC5jbG9zZSgpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICB9KVxyXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICBkZWxldGVQb3B1cC5yZW5kZXJTYXZpbmcoZmFsc2UpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZVByb2ZpbGVQaWNTdWJtaXQoZGF0YSkge1xyXG4gIHByb2ZpbGVQaWNQb3B1cC5yZW5kZXJTYXZpbmcodHJ1ZSk7XHJcbiAgYXBpXHJcbiAgICAudXBkYXRlUHJvZmlsZVBpYyhkYXRhKVxyXG4gICAgLnRoZW4oKGRhdGEpID0+IHtcclxuICAgICAgdXNlckluZm8uc2V0VXNlckluZm8oe1xyXG4gICAgICAgIG5hbWU6IGRhdGEubmFtZSxcclxuICAgICAgICB0aXRsZTogZGF0YS5hYm91dCxcclxuICAgICAgICBhdmF0YXI6IGRhdGEuYXZhdGFyLFxyXG4gICAgICB9KTtcclxuICAgICAgcHJvZmlsZVBpY1BvcHVwLmNsb3NlKCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgIH0pXHJcbiAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgIHByb2ZpbGVQaWNQb3B1cC5yZW5kZXJTYXZpbmcoZmFsc2UpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRvZ2dsZUxpa2UoY2FyZCkge1xyXG4gIGFwaVxyXG4gICAgLnRvZ2dsZUxpa2UoY2FyZC5faWQsIGNhcmQuaXNMaWtlZCgpKVxyXG4gICAgLnRoZW4oKGxpa2VzKSA9PiB7XHJcbiAgICAgIGNhcmQudXBkYXRlTGlrZXMobGlrZXMubGlrZXMpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICB9KTtcclxufVxyXG4iLCJjbGFzcyBVc2VySW5mbyB7XHJcbiAgY29uc3RydWN0b3IoeyB1c2VyTmFtZVNlbGVjdG9yLCB0aXRsZVNlbGVjdG9yLCBwcm9maWxlUGljU2VsZWN0b3IgfSkge1xyXG4gICAgdGhpcy5fdXNlck5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHVzZXJOYW1lU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fdGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRpdGxlU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fcHJvZmlsZVBpYyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocHJvZmlsZVBpY1NlbGVjdG9yKTtcclxuICB9XHJcblxyXG4gIGdldFVzZXJJbmZvKCkge1xyXG4gICAgY29uc3QgdXNlck9iaiA9IHtcclxuICAgICAgbmFtZTogdGhpcy5fdXNlck5hbWUudGV4dENvbnRlbnQsXHJcbiAgICAgIHRpdGxlOiB0aGlzLl90aXRsZS50ZXh0Q29udGVudCxcclxuICAgIH07XHJcbiAgICByZXR1cm4gdXNlck9iajtcclxuICB9XHJcblxyXG4gIHNldFVzZXJJbmZvKHsgbmFtZSwgdGl0bGUsIGF2YXRhciB9KSB7XHJcbiAgICB0aGlzLl91c2VyTmFtZS50ZXh0Q29udGVudCA9IG5hbWU7XHJcbiAgICB0aGlzLl90aXRsZS50ZXh0Q29udGVudCA9IHRpdGxlO1xyXG4gICAgdGhpcy5fcHJvZmlsZVBpYy5zcmMgPSBhdmF0YXI7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBVc2VySW5mbztcclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XHJcblxyXG5jbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2ltYWdlUG9wdXBJbWFnZSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX2ltYWdlXCIpO1xyXG4gICAgdGhpcy5faW1hZ2VQb3B1cENhcHRpb24gPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19jYXB0aW9uXCIpO1xyXG4gICAgdGhpcy5vcGVuID0gdGhpcy5vcGVuLmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBvcGVuKHsgbGluaywgbmFtZSB9KSB7XHJcbiAgICBzdXBlci5vcGVuKCk7XHJcbiAgICB0aGlzLl9pbWFnZVBvcHVwSW1hZ2Uuc3JjID0gbGluaztcclxuICAgIHRoaXMuX2ltYWdlUG9wdXBJbWFnZS5hbHQgPSBuYW1lO1xyXG4gICAgdGhpcy5faW1hZ2VQb3B1cENhcHRpb24udGV4dENvbnRlbnQgPSBuYW1lO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUG9wdXBXaXRoSW1hZ2U7XHJcbiIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cFwiO1xyXG5cclxuY2xhc3MgUG9wdXBXaXRoRGVsZXRlQ29uZmlybSBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBoYW5kbGVTdWJtaXQpIHtcclxuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fZm9ybSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX2Zvcm1cIik7XHJcbiAgICB0aGlzLl9oYW5kbGVTdWJtaXQgPSBoYW5kbGVTdWJtaXQ7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24gPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX3N1Ym1pdC1idXR0b25cIik7XHJcbiAgICB0aGlzLl9zdWJtaXRCdXR0b25UZXh0ID0gdGhpcy5fc3VibWl0QnV0dG9uLnRleHRDb250ZW50O1xyXG4gIH1cclxuXHJcbiAgb3BlbihjYXJkKSB7XHJcbiAgICBzdXBlci5vcGVuKCk7XHJcbiAgICB0aGlzLl9jYXJkID0gY2FyZDtcclxuICB9XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZSkgPT4ge1xyXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHRoaXMuX2hhbmRsZVN1Ym1pdCh0aGlzLl9jYXJkKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUG9wdXBXaXRoRGVsZXRlQ29uZmlybTtcclxuIl0sIm5hbWVzIjpbInNldHRpbmdzIiwiaW5wdXRTZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsImVycm9yQ2xhc3MiLCJwYWdlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicG9wdXBQcm9maWxlRm9ybSIsInBvcHVwQWRkRm9ybSIsInBvcHVwUHJvZmlsZVBpY0Zvcm0iLCJlZGl0QnV0dG9uIiwiYWRkQnV0dG9uIiwiZWRpdFByb2ZpbGVQaWNCdXR0b24iLCJwb3B1cE5hbWUiLCJwb3B1cFRpdGxlIiwiY29uc3RydWN0b3IiLCJmb3JtRWxlbWVudCIsInRoaXMiLCJfZm9ybSIsIl9pbnB1dFNlbGVjdG9yIiwiX3N1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiX2luYWN0aXZlQnV0dG9uQ2xhc3MiLCJfaW5wdXRFcnJvckNsYXNzIiwiX2Vycm9yQ2xhc3MiLCJfc2hvd0lucHV0RXJyb3IiLCJpbnB1dEVsIiwiZXJyb3JNZXNzYWdlIiwiZXJyb3JFbGVtZW50IiwiaWQiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0ZXh0Q29udGVudCIsIl9yZXNldEVycm9yIiwiX2hpZGVJbnB1dEVycm9yIiwicmVtb3ZlIiwic2V0VGltZW91dCIsIl9pc1ZhbGlkIiwidmFsaWRpdHkiLCJ2YWxpZCIsInZhbGlkYXRpb25NZXNzYWdlIiwiX2hhc0ludmFsaWRJbnB1dCIsImlucHV0TGlzdCIsImV2ZXJ5IiwiX2Rpc2FibGVCdXR0b24iLCJfYnV0dG9uRWwiLCJkaXNhYmxlZCIsIl9lbmFibGVCdXR0b24iLCJfdG9nZ2xlQnV0dG9uU3RhdGUiLCJfaW5wdXRFbHMiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjaGVja0lucHV0U3RhdHVzIiwidmFsdWUiLCJlbmFibGVWYWxpZGF0aW9uIiwiZXZ0IiwicHJldmVudERlZmF1bHQiLCJDYXJkIiwiZGF0YSIsInRlbXBsYXRlU2VsZWN0b3IiLCJoYW5kbGVDYXJkQ2xpY2siLCJoYW5kbGVUcmFzaEJ1dHRvbkNsaWNrIiwiaGFuZGxlTGlrZUJ1dHRvbiIsIl9uYW1lIiwibmFtZSIsIl9saW5rIiwibGluayIsIl9oYW5kbGVDYXJkQ2xpY2siLCJfdGVtcGxhdGUiLCJfbGlrZXMiLCJsaWtlcyIsIl9oYW5kbGVUcmFzaEJ1dHRvbkNsaWNrIiwiX293bmVySWQiLCJvd25lciIsIl9pZCIsIl91c2VySWQiLCJ1c2VySWQiLCJfaGFuZGxlTGlrZUJ1dHRvbiIsIl9nZXRUZW1wbGF0ZSIsImNvbnRlbnQiLCJjbG9uZU5vZGUiLCJ1cGRhdGVMaWtlcyIsIl9yZW5kZXJMaWtlcyIsIl9saWtlc1RvdGFsIiwibGVuZ3RoIiwiaXNMaWtlZCIsIl9saWtlQnV0dG9uIiwic29tZSIsImxpa2UiLCJfdHJhc2hCdXR0b24iLCJfaW1hZ2VFbCIsImdldENhcmRJZCIsImhhbmRsZURlbGV0ZSIsIl9jYXJkRWwiLCJnZXRWaWV3Iiwic3R5bGUiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJwb3B1cFNlbGVjdG9yIiwiX3BvcHVwIiwib3BlbiIsImJpbmQiLCJjbG9zZSIsIl9oYW5kbGVFc2NDbG9zZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJrZXkiLCJyZW5kZXJTYXZpbmciLCJpc1NhdmluZyIsImxvYWRpbmdUZXh0IiwiX3N1Ym1pdEJ1dHRvbiIsIl9zdWJtaXRCdXR0b25UZXh0Iiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJfcG9wdXBDbG9zZUJ1dHRvbiIsInRhcmdldCIsIm1hdGNoZXMiLCJQb3B1cCIsImhhbmRsZVN1Ym1pdCIsInN1cGVyIiwiX2hhbmRsZVN1Ym1pdCIsIl9pbnB1dHMiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJpbnB1dFZhbHVlcyIsInJlc2V0IiwiYXBpIiwiYmFzZVVybCIsImhlYWRlcnMiLCJfYmFzZVVybCIsIl9oZWFkZXJzIiwiX2hhbmRsZVJlc3BvbnNlIiwicmVzIiwib2siLCJqc29uIiwiUHJvbWlzZSIsInJlamVjdCIsInN0YXR1cyIsImluaXRpYWxpemUiLCJhbGwiLCJnZXRVc2VyIiwiZ2V0SW5pdGlhbENhcmRzIiwiZmV0Y2giLCJ0aGVuIiwic2V0VXNlckluZm8iLCJ0aXRsZSIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiYWJvdXQiLCJhZGRDYXJkIiwiZGVsZXRlQ2FyZCIsImNhcmRJZCIsInRvZ2dsZUxpa2UiLCJ1cGRhdGVQcm9maWxlUGljIiwiYXZhdGFyIiwiYXV0aG9yaXphdGlvbiIsInJlbmRlckNhcmQiLCJjYXJkIiwibmV3Q2FyZCIsImNhcmRMaXN0IiwiYWRkSXRlbSIsImltYWdlUG9wdXAiLCJkZWxldGVQb3B1cCIsInVzZXIiLCJjb250YWluZXJTZWxlY3RvciIsIml0ZW1zIiwicmVuZGVyZXIiLCJfaXRlbXMiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwicmVuZGVySXRlbXMiLCJpdGVtIiwiZWxlbWVudCIsInByZXBlbmQiLCJ1c2VySW5mbyIsImNhdGNoIiwiZXJyIiwiY29uc29sZSIsImxvZyIsInVzZXJOYW1lU2VsZWN0b3IiLCJ0aXRsZVNlbGVjdG9yIiwicHJvZmlsZVBpY1NlbGVjdG9yIiwiX3VzZXJOYW1lIiwiX3RpdGxlIiwiX3Byb2ZpbGVQaWMiLCJnZXRVc2VySW5mbyIsInNyYyIsIl9pbWFnZVBvcHVwSW1hZ2UiLCJfaW1hZ2VQb3B1cENhcHRpb24iLCJhbHQiLCJlZGl0Rm9ybVZhbGlkYXRvciIsIkZvcm1WYWxpZGF0b3IiLCJhZGRGb3JtVmFsaWRhdG9yIiwicHJvZmlsZVBpY0Zvcm1WYWxpZGF0b3IiLCJlZGl0UG9wdXAiLCJQb3B1cFdpdGhGb3JtIiwiZmluYWxseSIsImhhbmRsZVByb2ZpbGVPcGVuIiwiYWRkUG9wdXAiLCJfY2FyZCIsImUiLCJwcm9maWxlUGljUG9wdXAiXSwic291cmNlUm9vdCI6IiJ9